# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto_sample.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12proto_sample.proto\"P\n\x0bUserRequest\x12\x11\n\timg_bytes\x18\x01 \x01(\x0c\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x0e\n\x06height\x18\x03 \x01(\x05\x12\x0f\n\x07\x63hannel\x18\x04 \x01(\x05\"3\n\x0bServerReply\x12\x10\n\x08\x64istance\x18\x01 \x01(\x05\x12\x12\n\nis_abscent\x18\x02 \x01(\x08\x32?\n\x14RemoteControlService\x12\'\n\x07process\x12\x0c.UserRequest\x1a\x0c.ServerReply\"\x00\x62\x06proto3')



_USERREQUEST = DESCRIPTOR.message_types_by_name['UserRequest']
_SERVERREPLY = DESCRIPTOR.message_types_by_name['ServerReply']
UserRequest = _reflection.GeneratedProtocolMessageType('UserRequest', (_message.Message,), {
  'DESCRIPTOR' : _USERREQUEST,
  '__module__' : 'proto_sample_pb2'
  # @@protoc_insertion_point(class_scope:UserRequest)
  })
_sym_db.RegisterMessage(UserRequest)

ServerReply = _reflection.GeneratedProtocolMessageType('ServerReply', (_message.Message,), {
  'DESCRIPTOR' : _SERVERREPLY,
  '__module__' : 'proto_sample_pb2'
  # @@protoc_insertion_point(class_scope:ServerReply)
  })
_sym_db.RegisterMessage(ServerReply)

_REMOTECONTROLSERVICE = DESCRIPTOR.services_by_name['RemoteControlService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _USERREQUEST._serialized_start=22
  _USERREQUEST._serialized_end=102
  _SERVERREPLY._serialized_start=104
  _SERVERREPLY._serialized_end=155
  _REMOTECONTROLSERVICE._serialized_start=157
  _REMOTECONTROLSERVICE._serialized_end=220
# @@protoc_insertion_point(module_scope)
